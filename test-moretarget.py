import networkx as nx
import matplotlib.pyplot as plt
from itertools import permutations

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
G = nx.Graph()
cafes = ["Cafe A", "Cafe B", "Cafe C", "Cafe D", "Cafe E"]
G.add_nodes_from(cafes)

edges = [
    ("Cafe A", "Cafe B", 3),
    ("Cafe A", "Cafe D", 2),
    ("Cafe B", "Cafe D", 4),
    ("Cafe B", "Cafe E", 7),
    ("Cafe C", "Cafe D", 6),
    ("Cafe C", "Cafe E", 5),
    ("Cafe D", "Cafe E", 8)
]
G.add_weighted_edges_from(edges)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
def find_best_shortest_path(start, destinations):

    if len(destinations) == 1:
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏ä‡πâ Dijkstra ‡∏õ‡∏Å‡∏ï‡∏¥
        end = destinations[0]
        path = nx.shortest_path(G, source=start, target=end, weight="weight")
        distance = nx.shortest_path_length(G, source=start, target=end, weight="weight")
        return path, distance
    
    best_path = None
    best_distance = float("inf")
    best_detailed_info = None

    # ‡∏•‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    for perm in permutations(destinations):
        path = [start]
        total_distance = 0
        detailed_path_info = []
        current_location = start

        for next_stop in perm:
            sub_path = nx.shortest_path(G, source=current_location, target=next_stop, weight="weight")
            sub_distance = nx.shortest_path_length(G, source=current_location, target=next_stop, weight="weight")

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
            for i in range(len(sub_path) - 1):
                u, v = sub_path[i], sub_path[i + 1]
                dist = G[u][v]['weight']
                detailed_path_info.append(f"{u} ‚Üí {v} : ({dist} km)")

            # ‡∏£‡∏ß‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
            path.extend(sub_path[1:])
            total_distance += sub_distance
            current_location = next_stop

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
        if total_distance < best_distance:
            best_distance = total_distance
            best_path = path
            best_detailed_info = detailed_path_info

    return best_path, best_distance, best_detailed_info

# üîπ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å Cafe A ‡πÑ‡∏õ Cafe C ‡πÅ‡∏•‡∏∞ Cafe E
start = "Cafe A"
destinations = ["Cafe C", "Cafe E"]
shortest_path, total_distance, path_details = find_best_shortest_path(start, destinations)

# üîπ ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü
pos = nx.spring_layout(G, seed=42)
fig, ax = plt.subplots(figsize=(8, 8))

nx.draw(G, pos, with_labels=True, node_size=3000, node_color="#90CAF9", font_size=12, font_weight="bold", edge_color="gray", width=2)
# üîπ ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
path_edges = list(zip(shortest_path, shortest_path[1:]))
nx.draw_networkx_edges(G, pos, edgelist=path_edges, edge_color="red", width=2.5)  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏•‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢

# üîπ ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
edge_labels = {(u, v): w for u, v, w in edges}
label_pos = {}

for (u, v) in edge_labels:
    x_mid = (pos[u][0] + pos[v][0]) / 2  # ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô
    y_mid = (pos[u][1] + pos[v][1]) / 2  

    # ‡∏Ç‡∏¢‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ç‡∏∂‡πâ‡∏ô-‡∏•‡∏á‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡πÄ‡∏™‡πâ‡∏ô
    if (u, v) in path_edges or (v, u) in path_edges:
        y_mid += 0.08  # ‡∏Ç‡∏¢‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á
        x_mid += 0.02  # ‡∏Ç‡∏¢‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢

    label_pos[(u, v)] = (x_mid, y_mid)

# üîπ ‡∏ß‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏ö‡∏ö‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=10,
                             bbox=dict(facecolor="white", edgecolor="none", alpha=1), 
                             verticalalignment='center', horizontalalignment='center', rotate=False)



# üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
plt.suptitle("Best Shortest Path Finder for Caf√©s", fontsize=18, fontweight="bold", color="darkblue", y=1.00)
plt.figtext(0.5, 0.92, f"Best Path: {shortest_path} (Total: {total_distance} km)", fontsize=12, color="gray", ha="center")
plt.figtext(0.5, 0.85, "Route Details:\n" + "| ‚Üí |".join(path_details), fontsize=11, color="green", ha="center", bbox=dict(facecolor="white", alpha=0.7))
plt.subplots_adjust(top=0.75)

plt.show()


